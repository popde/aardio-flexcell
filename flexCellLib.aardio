//FlexCell表格库
import com.activeX;
import fsys;
/*
	FlexCell是一款美观、方便、易用的电子表格控件，附带FlexCell表格设计器，提供图表、虚表、打印预览、打印、排序等功能
	本库基于v6.3.4标准版构建 , 商业用途请购买正版使用 , FlexCell官方网址:http://www.grid2000.com/cn/
	本库创建于:2019/01/10 由 popdes 编写 , 发布于:http://www.htmlayout.cn/t/243
	更新日志:
	2019/09/21 修复com事件返回值的bug
	2019/09/21 增加创建控件时候是否开启自动重绘功能参数
*/
class FlexCellLib{
    ctor( winform,row=11,col=5,autoRedraw=true ){
        winform.onEraseBkgnd  = function(hwnd,message,wParam,lParam){
            return 0;//禁止擦除背景
        };
        this = winform.createEmbed("{4331220A-1077-4630-BEE3-0D7142D6ABD0}");
        
        //this._object.SetRegisterInformation("你的名字", "你的注册码");
  
        this._object.GridColor = 0x4C7449;//分割线颜色
        this._object.ScrollBarStyle = 0/*_Flat*/  ;
        this._object.AllowUserResizing = true;
        this._object.BackColor1 = 0xFFFFFF;
        this._object.BackColor2 = 0xFFEACF;
        this._object.ExtendLastCol = true;//最后一列是否扩展列宽,让表格充满控件
        this._object.Cols = col;
        this._object.Rows = row;
        this._object.StartRowNumber = 1;//起始行号
        this._object.DisplayRowIndex = true;//是否显示行号
        this._object.DisplayFocusRect = true;//
        this._object.DisplayClientBorder = true;//显示客户区边框
        this._object.Appearance = 0;//平面风格
        this._object.BoldFixedCell = true;//显示点中框
        this._object.DefaultRowHeight = 30;//默认行高
        this._object.AutoRedraw = autoRedraw;//自动重绘
        
		..com.Connect(this._object,{ 
			AfterUserSort  = function(col){
				this._object.AfterUserSort(col);
			};
			BeforeUserSort  = function(col){
				this._object.BeforeUserSort(col);
			};
			ButtonClick  = function(){
				this._object.ButtonClick();
			};
			CellChange  = function(row,col){
				this._object.CellChange(row,col);
			};
			CellChanging  = function(row,col){
				this._object.CellChanging(row,col);
			};
			Click  = function(){
				this._object.Click();
			};
			ColWidthChange  = function(FirstCol ,LastCol ){
				this._object.ColWidthChange(FirstCol ,LastCol);
			};
			ComboClick  = function(index){
				this._object.ComboClick(index);
			};
			ComboDropDown  = function(row,col){
				this._object.ComboDropDown(row,col);
			};
			DblClick  = function(){
				this._object.DblClick();
			};
			EditRow  = function(index){
				this._object.EditRow(index);
			};
			EnterRow  = function(index){
				this._object.EnterRow(index);
			};
			GetCellText  = function(row,col,text,changed){
				return this._object.GetCellText(row,col,text,changed);
			};
			SetCellText  = function(row,col,text,changed){
				return this._object.SetCellText(row,col,text,changed);
			};
			HyperLinkClick  = function(row,col,url,changed){
				return this._object.HyperLinkClick(row,col,url,changed);
			};
			KeyDown  = function(keycode,shift){
				this._object.KeyDown(keycode,shift);
			};
			KeyUp  = function(keycode,shift){
				this._object.KeyUp(keycode,shift);
			};
			KeyPress  = function(KeyAscii){
				this._object.KeyPress(KeyAscii);
			};
			LeaveCell  = function(row,col,newRow,newCol,cancel){
				return this._object.LeaveCell(row,col,newRow,newCol,cancel);
			};
			LeaveRow  = function(row,cancel){
				return this._object.LeaveRow(row,cancel);
			};
			MaskError  = function(row,col){
				this._object.MaskError(row,col);
			};
			MouseDown  = function(btton,shift,x,y){
				this._object.MouseDown(btton,shift,x,y);
			};
			MouseUp  = function(btton,shift,x,y){
				this._object.MouseUp(btton,shift,x,y);
			};
			MouseMove  = function(btton,shift,x,y){
				this._object.MouseMove(btton,shift,x,y);
			};
			OwnerDrawCell  = function(row,col,hdc,left,top,right,bottom,handled){
				return this._object.OwnerDrawCell(row,col,hdc,left,top,right,bottom,handled);
			};
			PercentComplete  = function(message,percent){
				this._object.PercentComplete(message,percent);
			};
			PrintButtonClick  = function(){
				this._object.PrintButtonClick();
			};
			RowColChange  = function(row,col){
				this._object.RowColChange(row,col);
			};
			RowHeightChange  = function(Firstrow,Lastcol){
				this._object.RowHeightChange(Firstrow,Lastcol);
			};
			Scroll  = function(){
				this._object.Scroll();
			};
		});
        return this._object; 
    };
    @_metaProperty;
}
namespace FlexCellLib{
    try{
         ..com.CreateObject("{4331220A-1077-4630-BEE3-0D7142D6ABD0}")
    }catch(e){
       	var reg = ..win.reg("HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Licenses\E08BA07E-6463-4EAB-8437-99F08000BAD9");
		if(! reg.queryValue("") ) reg.setSzValue("","ojgjljccdjccjcpjpdcjpcrcqdmdjcdjljri"); 
        ..com.activeX.regsvr32As("\res\FlexCell.ocx");  
    }
}
  
/**intellisense()
FlexCellLib = FlexCell表格控件
FlexCellLib() = 创建FlexCell表格控件\n!FlexCell.
FlexCellLib(.(winform,row,col,autoDraw) = 参数为静态控件如static和picturebox,后三个参数可选,为行数和列数,是否开启自动重绘
end intellisense**/
 
/**intellisense(!FlexCell)
AboutBox() = 关于
SetRegisterInformation("owner","serialNum") = 设置注册资料
ActiveCell() = 返回对当前活动单元格的引用\n!Cell.
Cell(.(row,col) = 设置单元格属性,参数(行,列)
Cell() = 设置单元格属性\n!Cell.
AllowUserPaste = 返回或者设置一个值，该值决定了是否允许用户粘贴文字和格式\n_cellTextAndFlexCellFormat=1;\n_cellTextOnly=2;\n_cellTextAndFormat=0;\n_cellNotAllowed=3
AllowUserSort = 返回或者设置一个bool值，该值决定了是否允许用户用鼠标点击固定行来对表格内容排序
AllowUserReorderColumn = 返回或者设置一个值，该值决定了是否可以用鼠标来拖动列标题（固定行中的单元格），整列移动单元格
AllowUserResizing = 返回或者设置一个bool值，该值决定了是否可以用鼠标来重新调整FlexCell表格的行高和列宽
Appearance = 返回或设置控件的绘图风格,可设置为\n 0=平面\n1=3D(默认)
AutoRedraw = 返回或者设置一个值，该值决定了是否能够重绘控件\n将AutoRedraw属性设置为False可以提高加载数据的速度，待所有操作完成后，切记应将之恢复为True
BackColor1 = 返回或设置表格中 [奇数行] 的背景色
BackColor2 = 返回或设置表格中 [偶数行] 的背景色
BackColorActiveCellSel = 返回或设置选择了多个单元格时，活动单元格的背景颜色\n例如拖动选择了一排单元格,那么第一个被点中的显示的颜色
BackColorBkg = 返回或设置表格中 空白区域 的背景色
BackColorFixed = 返回或设置表格中 固定行/列 的背景色(即第0列和第0行的颜色)
BackColorComment = 返回或设置批注窗口的背景色
BackColorFixedSel = 返回或设置表格中选定单元格（Selection）在固定行/列上对应单元格的背景色，将BackColorFixed属性和BackColorFixedSel属性设置为不同的值，可以清晰地反映出Selection的位置。
BackColorScrollBar = 返回或设置滚动条的背景色
BackColorSel = 返回或设置表格中选定单元格（Selection）的背景色(即拖拽选中的单元格背景色)
BorderColor = 返回或设置控件边框的颜色
BottomRow = (只读的)返回表格中最下边可见的非固定行数。此属性在设计时不可用
BoldFixedCell = (bool值)返回或设置是否在固定行/列上以粗体画出Selection所对应的单元格的文字\n即点击单元格之后对应的行和列文字是否要加粗显示
ButtonLocked = (bool值)返回或设置是否锁定Button控件，禁止在Button内按键盘输入
CellBorderColor = 返回或设置单元格边框的颜色
CellBorderColorFixed = 返回或设置固定行和固定列上的单元格边框的颜色
ClearBlankArea = (bool值)返回或设置是否清除客户区和底部冻结行之间的空白区域，包括背景色和网格线
Cols = 返回或设置表格的列数
CommentIndicatorColor = 返回或设置批注标识的颜色
CommentWindowWidth = 返回或设置批注窗口的宽度\n单位为像素，取值范围为20至500
DateFormat = 返回或设置Calendar子控件的日期格式,参数为(年月日):\n_cellYMD=0;\n_cellMDY=1;\n_cellDMY=2;
DefaultFont = 设置或返回表格的缺省字体，固定行、固定列以及没有明确设置字体的单元格都将采用DefaultFont\n!cellFont.
DefaultRowHeight = 返回或设置Grid的默认行高,单位是像素，行高必须大于0
DisablePrintButton = (bool值)返回或设置控件是否禁用打印预览窗口中的打印按钮
DisplayClientBorder = (bool值)返回或设置控件在最后一行单元格与控件背景之间、最后一列单元格与控件背景之间，是否显示一条黑色的框线
DisplayFocusRect = (bool值)返回或设置控件在当前活动单元格是否显示一个虚框
DisplayRowIndex = (bool值)返回或设置控件在固定列上是否显示行号
DisplayBarcodeText = (bool值)返回或设置是否在条形码的下方显示文字
DisplayDateTimeMask = (bool值)返回或设置是否显示日期、时间控件的输入掩码\n如果设置为True，会显示“____-__-__ __:__:__”，否则会以空格代替“_”。
DisplayErrorMessage = (bool值)返回或设置控件是否显示错误消息框\n例如复制/粘贴时，如果目标位置存在只读单元格，是否显示操作失败的消息框
DragDelay = 返回或者设置一个值，该值决定了拖动列前需要延时的毫秒数\nValue 一个整数，它指定了延时的毫秒数，缺省值为500 
DrawMode = 返回或设置控件的绘图模式\n_cellNormal=0;\n_cellOwnerDraw=1
EditorVisible = 返回单元格编辑器（TextBox、ComboBox、Button等）是否可见\n如果为True，说明控件正处理编辑状态
EnableVisualStyles = (bool值)返回或设置是否允许表格中的ComboBox、Calendar和Button控件显示XP效果（需要操作系统的支持）。
EnterKeyMoveTo = 返回或设置在Grid中按Enter键后，活动单元格是移到下一行，还是移到下一列\n_cellNextRow=1;\n_cellNextCol=0
ExtendLastCol = (bool值)返回或设置是否扩展最后一列的列宽，让表格可以充满控件
FileName = 当调用了OpenFile、SaveFile、LoadFromXML、ExportToXML这4个方法时，如果将FileName参数设置为空字符串（""），会显示一个打开（或保存）文件对话框，FileName属性可以返回这个对话框中选择（或输入）的文件名
FirstDayOfWeek = 返回或设置每个星期中的第一天是星期几，此属性在国际化程序中有用\n_cellSaturday=6;\n_cellSunday=0;\n_cellThursday=4;\n_cellMonday=1;\n_cellWednesday=3;\n_cellFriday=5;\n_cellTuesday=2
OpenFile("filePath.cel") = 该方法用于打开一个已经存在的FlexCell文档（扩展名为cel）,参数为空""则弹出选择框,用obj.FileName获取被选择文件名
SaveFile("filePath.cel") = 该方法用于保存FlexCell文档（扩展名为cel）,参数为空""则弹出选择框,用obj.FileName获取被选择文件名
LoadFromXML("filePath.xml") = 该方法用于将XML文档内容载入到表格中。此方法需要使用MSXML3.DLL中的一些功能，如果您的系统中没有此文件，将不能正确地载入XML文件
ExportToXML("filePath.xml") = 该方法用于将表格内容输出为XML格式的文档，此方法可以将表格中除图片以外的所有资料都输出到XML。此方法需要使用MSXML3.DLL中的一些功能，如果您的系统中没有此文件，将不能正确地输出XML文件
FixedCols = 返回或设置表格中固定列的数量,最小为1 (固定列指:左侧不会被移动的列数)
FixedRowColStyle = 返回或设置固定行/列的样式\n 0=平面,1=3D(默认),2=应用视觉样式
FixedRows = 返回或设置表格中固定行的数量,最小为1 (固定行指:上侧不会被移动的行数)
ForeColorComment = 返回或设置批注窗口的文字颜色
FrozenBottomRows = 返回或设置表格中底部冻结行的数量。底部冻结行通常会显示在表格的最下方，如果把垂直滚动条拖到最下方，或者控件中有足够的空间，底部冻结行会紧贴着它的上一行显示出来。\nValue 一个整数，它指定了表格中底部冻结行的数量 
FrozenRows = 返回或设置表格中冻结行的数量.(为实际客户区从上到下的行数)
FrozenCols = 返回或设置表格中冻结列的数量.(为实际客户区从上到下的列数)
ForeColorFixed = 返回或设置固定行/列的前景色（文字的颜色）
HitTest(x,y) = 该方法测试控件内指定位置是否存在单元格，如果存在，则返回一个Cell对象，如果不存在则返回Nothing
HitTest() = !Cell.
GridColor = 返回或设置网格线的颜色
HideGridLines = (bool值)返回或设置是否隐藏网格线\n如果设置为True，且设置了单元格背景色，控件会以单元格的背景色画出单元格边框以覆盖网格线
HPageBreaks = HPageBreaks集合是Grid控件的水平分页符的一个集合，可以通过HPageBreaks集合所提供的方法对Grid控件的水平分页符执行添加、删除等操作\n!HPageBks.
HScrollbarIsVisible = (只读的)返回水平滚动条是否可见
VPageBreaks = VPageBreaks集合是Grid控件的垂直分页符的一个集合，可以通过VPageBreaks集合所提供的方法对Grid控件的垂直分页符执行添加、删除等操作\n!HPageBks.
Images = 返回对表格图片组的引用，可以通过Images属性对表格的图片组执行增加图片、删除图片等操作\n!Imgs.
LastErrorMessage = 有一些特定的操作可能会显示一些错误或警告信息,可以设置DisplayErrorMessage为False，以禁止控件自动显示错误消息框，并可通过LastErrorMessage返回最后的错误信息\n例如，在只读单元格上粘贴内容、合并只读单元格时，都会弹出消息框
LeftCol = 返回或设置表格中最左边可见的不固定列,参数来指定列数
MouseCol = (只读的)返回鼠标所在位置单元格的列号。此属性在设计时不可用
MouseRow = (只读的)返回鼠标所在位置单元格的行号。此属性在设计时不可用
MouseWheelSpeed = 返回或设置滚动鼠标滚轮时，每次滚动多少行表格内容\nValue 一个整数，它指定了滚动的行数，缺省值为3 
MultiSelect = (bool值)返回或设置是否允许用户在表格中选取多个单元格/行/列
PageSetup = 返回对PageSetup对象的引用(时间问题,未添加此功能,需要的话自行扩展下)\n!PageSET.
ReadOnly = bool值)返回或设置整个表格是否只读
ReadOnlyFocusRect = 返回或设置锁定（只读）单元格所显示的虚框样式,\n参数为:0=_Solid(实线), 1=_Dot(虚线)
ReportTitles = 返回对报表标题集合的引用，可以通过ReportTitles属性对报表标题集合执行增加、删除操作\n!FlexReportTitles.
RightCol = (只读的)返回表格中最右边可见的非固定列。此属性在设计时不可用
setRowHeight(row,value) = 设置某一行的行高，此属性在设计时不可用
getRowHeight(row) = 返回某一行的行高，此属性在设计时不可用
Rows = 返回或设置表格的行数
ScrollBars = 返回或设置是否显示水平和垂直滚动条\n参数:_cellScrollBarNone=0;\n_cellScrollBarHorizontal=1;\n_cellScrollBarVertical=2;\n_cellScrollBarBoth=3
ScrollBarStyle = 返回或设置滚动条的样式\n参数:0=平面,1=3D(默认)
Selection = 返回对当前活动选定区域单元格的引用\n!FlexSelection.
SelectionBorderColor = 返回或设置Selection边框的颜色
SelectionMode = 返回或设置表格的选择模式,参数为:\n_cellSelectionByRow=1;\n_cellSelectionByColumn=2;\n_cellSelectionFree=0;\n_cellSelectionNone=3
SelectWholeCell = (bool值)返回或设置用户点击单元格时是否选中单元格中的全部文字，缺省值为True
SelLength = 返回或设置Grid中子控件所选择的文本的字符数\n如果Grid中没有可见的子控件，或子控件是Calendar，则此属性没有意义，返回值为0
SelStart = 返回或设置Grid中子控件所选择的文本的起始点\n如果没有文本被选中，则指出插入点的位置\n如果Grid中没有可见的子控件，或子控件是Calendar，则此属性没有意义，返回值为0
ShowContextMenu = (bool值)返回或设置一个值，该值决定了用户在TextBox、ComboBox等子控件中点击鼠标右键时是否显示右键菜单
ShowResizeTips = (bool值)返回或设置一个值，该值决定了用户用鼠标调整FlexCell表格的行高或列宽时，是否显示行高或列宽的提示窗口,bool值
SortIndicatorColor = 返回或设置排序标识的颜色（当排序标识为平面时有效）。
SortIndicatorStyle  = 返回或设置排序标识的样式\n_cell3DIndicator=1;\n_cellFlatIndicator=0
StartRowNumber = 返回或设置当DisplayRowIndex属性设置为True时，在固定列中显示的起始行号，默认值为1
StretchBarcode = (bool值)返回或设置是否根据单元格的宽度自动拉伸条形码（调整宽度）。
TimeFormat = 返回或设置Time和DateTime子控件的时间格式\n_cellHM=2;\n_cellHMS=0;\n_cellHMSAMPM=1;\n_cellHMAMPM=3
TopRow = 返回或设置表格中最上边可见的不固定行。此属性在设计时不可用
TotalPages = 返回表格内容的总页数
VScrollbarIsVisible = (只读的)返回垂直滚动条是否可见
AddChart(.(row,col) = 添加一个Chart对象
AddChart() = !FlexChart.
AutoFitRowHeight(row) = 该方法用于自动调整表格中指定行的行高，使此行单元格即可容纳所有单元格文字大小
ClosePrintPreviewWindow() = 在使用了Grid控件的Form的Unload事件中调用此方法，让程序能够自动关闭非模态的打印预览窗口\n用PrintPreviewVirtualGrid该方法显示出来的打印预览窗口是非模态的，如果用户直接关闭了Grid所在的窗口，打印预览窗口并不会自动关闭
RemoveChart(.(row,col) = 移除一个Chart对象
Chart(.(row,col) = 返回对表格中一个Chart对象的引用
Chart() = !FlexChart.
SaveChartAsBitmap(Row, Col, FileName) = 该方法用于将Chart保存为位图文件(*.bmp)。
AddItem(text,reDrawBool) = 将一行数据添加到FlexCell控件中\nText = 字符串表达式，它在新增行中显示。\n可以用制表符 (vbTab或Chr(9)) 来分隔每个字符串，从而将多个字符串（行中的多个列）添加进去\n reDrawBool = 一个布尔值，指明添加一行时，是否重画表格。不重画可以提高速度
RemoveItem(index) = 删除表格中的一行(参数为行号)。\n如果要一次性删除多行或多列单元格，请参阅Range对象和Selection对象的DeleteByRow、DeleteByCol方法
Column(col) = 返回对FlexCell表格中某一列的引用,\n参数为:指定的列号
Column() = !FlexColumn.
ComboBox(col) = 返回对FlexCell表格中某一列的ComboBox子控件的引用\n col用于指定列号
ComboBox() = !FlexComboBox.
DirectPrint(pageNo) = 打印表格中的内容,\nPageNo参数是可选的，用于指定将要打印页面的页码，如果不设置PageNo，则打印所有页面
PrintPreview(zoom) = 预览打印效果\nZoom 参数是可选的，取值范围在10~200之间，用于指定打印预览窗口的缩放比例
PrintPreviewEx(.(Modal, ShowOptionsButton, ShowMarginsButton, Zoom, Left, Top, Width, Height) = 该方法是对PrintPreview方法的扩展，可以设置更多的参数\nModal 指定是否显示模态的预览窗口，如果使用了虚表，应该把这个参数设置为False \nShowOptionsButton 指定是否在预览窗口中显示“设置”按钮 \nShowMarginsButton 指定是否在预览窗口中显示“页边距”按钮 \nZoom 指定缩放比例，取值范围：10至200 \nLeft 指定预览窗口左边的位置，单位是像素 \nTop 指定预览窗口顶部的位置，单位是像素 \nWidth 指定预览窗口的宽度，单位是像素 \nHeight 指定预览窗口的高度，单位是像素 
PrintPreviewVirtualGrid(zoom) = 因为虚表是利用Grid的GetCellText事件实现的，而PrintPreview方法显示出来的是模态（Modal）的打印预览窗口，此窗口一旦显示出来，Grid所在的Form就不能再触发任何事件了，虚表会失效，因此将无法正常预览和打印\n本方法就是针对上述问题而设置的，显示一个非模态的打印预览窗口\n使用本方法时需要注意的事项有：\n如果Grid所在的Form是模态的，此方法会失效，因为在Windows的窗口管理机制中，不允许从模态的Form中显示非模态的Form。\n因为此方法显示出来的打印预览窗口是非模态的，用户可以在打开了预览窗口后，直接关闭Grid所在的Form，打印预览窗口不会自动关闭，需要调用ClosePrintPreviewWindow方法来关闭它\nZoom 在VB6和VB.Net中，此参数是可选的，取值范围在10~200之间，用于指定打印预览窗口的缩放比例。
ExportToExcel(FileName, ExportFixedRow, ExportFixedCol) = 将FlexCell文档输出为Excel Workbook（不需要Excel运行库的支持），输出文件的二进制格式为BIFF8\nFileName 必需的。字符串表达式，用于指定文件名 \nExportFixedRow 可选的。一个布尔值，该值决定是否输出固定行。 \nExportFixedCol 可选的。一个布尔值，该值决定是否输出固定列。 
ExportToCSV(FileName, ExportFixedRow, ExportFixedCol) = 该方法用于将表格输出为CSV格式的文件。CSV格式的文件可以用Excel打开，同一行相临两个单元格的文字以逗号分隔\nFileName 必需的。字符串表达式，用于指定文件名 \nExportFixedRow 可选的。一个布尔值，该值决定是否输出固定行。 \nExportFixedCol 可选的。一个布尔值，该值决定是否输出固定列。 
ExportToHTML(FileName) = 该方法用于将FlexCell文档输出为HTML文档\n如果FileName=""则弹出保存框
ExportToPDF(FileName) = 该方法用于将打印预览的内容以图片的方式输出到PDF文件中\n如果FileName=""则弹出保存框
ExportToXMLString() = 该方法用于将表格内容输出为XML格式的字符串，返回值就是输出结果\n此方法需要使用MSXML3.DLL中的一些功能，如果您的系统中没有此文件，将不能正确地输出XML文件。如果要将输出的XML字符串文件载入到表格，可以使用LoadFromXMLString方法
HttpLoadFromXML(url) = 该方法以HTTP方式导入存储在Internet服务器上的*.xml文件，如果操作成功，该方法的返回值为True，否则返回值为False
HttpOpenFile(url) = 该方法以HTTP方式打开存储在Internet服务器上的*.cel文件，如果操作成功，该方法的返回值为True，否则返回值为False
LoadFromXMLString(xml) = 该方法用于将XML字符串载入到表格中。此方法需要使用MSXML3.DLL中的一些功能，如果您的系统中没有此文件，将不能正确地载入XML数据\nXML 必需的。字符串表达式，必须是一个合法的XML字符串 
LoadLanguageConfig(FileName) = 该方法用于载入语言配置文件，可以用这个方法为程序实现多语言支持功能\nFileName 一个String值，它用来指定要打开的文件名，它的扩展名是xml 
MoveRow(MoveFrom,MoveTo) = 该方法用于移动一个表格行\nMoveFrom 一个整数，用于指定要移动的行 \nMoveTo 一个整数，用于指定目标位置 
InsertCol(StartCol, Count) = 向表格插入指定数量的空列\nStartCol 必需的。是一个整数，用于指定插入空列的起始位置 \nCount 必需的。是一个整数，用于指定插入空列的总数 
InsertRow(StartRow, Count) = 向表格插入指定数量的空行\nStartRow 必需的。是一个整数，用于指定插入空行的起始位置 \n必需的。是一个整数，用于指定插入空行的总数
NewFile() = 新建一个临时文件，重新初始化控件的属性
PrintDialog() = 显示“打印机设置”对话框，用户可以在这个对话框里选择打印机、设置打印机属性，如果用户点击了对话框中的“关闭”按钮，该方法返回值为True，否则为False
Range(FirstRow,FirstCol,LastRow,LastCol) = 该方法返回对FlexCell表格中某一区域的单元格的引用\nFirstRow 一个整数，用于指定区域的起始行号 \nFirstCol 一个整数，用于指定区域的起始列号 \nLastRow 一个整数，用于指定区域最后一行的行号 \nLastCol 一个整数，用于指定区域最后一列的列号 
Range() = !FlexRange.
Refresh() = 重画整个控件。调用AddItem方法向控件添加大量数据时，设置Redraw参数为False可以提高处理速度，当所有数据添加完毕后，应调用Refresh方法重画控件
AfterUserSort = @.AfterUserSort = function(Col){
	/***用户可以点击列标题（固定行）对表格数据进行排序，此事件在排序完成后发生
	 Col 返回一个整数，标识已排序的列号 ***/
	__
}
BeforeUserSort = @.BeforeUserSort = function(Col){
	/***用户可以点击列标题（固定行）对表格数据进行排序，此事件在排序前发生
	 Col 返回一个整数，标识将要排序的列号 ***/
	__
}
ButtonClick = @.ButtonClick = function(){
	/***此事件在用户用鼠标点Button类型的单元格时发生。
	您可以在此事件中做一些有用的事情，例如可以调用CommonDialog控件来选择文件名 ***/
	__
}
CellChange = @.CellChange = function(Row,Col){
	/***此事件在单元格的内容发生了改变时发生
	 Row 返回一个整数，标识单元格所在的行 
	 Col 返回一个整数，标识单元格所在的列  ***/
	__
}
CellChanging = @.CellChanging = function(Row,Col){
	/***此事件在单元格的内容正在改变时发生
	 Row 返回一个整数，标识单元格所在的行 
	 Col 返回一个整数，标识单元格所在的列  ***/
	__
}
Click = @.Click = function(){
	/***此事件在用户用鼠标点击表格时发生 ***/
	__
}
ColWidthChange = @.ColWidthChange = function(FirstCol,LastCol){
	/***此事件在一列或多列的列宽改变时发生
	 FirstCol 一个整数，起始列号  
	 LastCol 一个整数，截止列号   ***/
	__
}
ComboClick = @.ComboClick = function(Index){
	/***此事件在用户用鼠标点击ComboBox子控件下拉列表中的项时发生
	 Index 返回一个整数，标识ComboBox子控件在FlexCell控件中所处的列数 ***/
	__
}
ComboDropDown = @.ComboDropDown = function(Row,Col){
	/***此事件在用户用鼠标点击ComboBox中的小箭头时发生。
	 只有CellType设置为cellComboBox的单元格才能触发此事件，
	 在此事件发生前，会清除ComboBox(0)的下拉列表项，因此必须在此事件中编程向ComboBox(0)添加下拉列表项
	 Row 返回一个整数，标识ComboBox子控件在Grid中所处的行数  
	 Col 返回一个整数，标识ComboBox子控件在Grid中所处的列数   ***/
	__
}
DblClick = @.DblClick = function(){
	/***此事件在用户用鼠标双击表格时发生 ***/
	__
}
EditRow = @.EditRow = function(Index){
	/***此事件在活动单元格设置到一个新行后，第一次编辑单元格的内容时发生
	 Index 返回一个整数，标识正在编辑的单元格的行号  ***/
	__
}
EnterRow = @.EnterRow = function(Index){
	/***此事件在活动单元格设置到一个新行后发生
	 Index 返回一个整数，标识进入的行号   ***/
	__
}
GetCellText = @.GetCellText = function(Row,Col,Text,Changed){
	/***此事件在取得单元格文字时发生，可以用GetCellText事件实现虚表功能
	 Row 返回一个整数，标识单元格所在的行号    
	 Col 返回一个整数，标识单元格所在的列号 
	 Text 字符串表达式，如果Changed参数设置为True，Text参数的值将替代单元格的实际文字 
	 Changed 如果设置Changed=True，可以使Text参数的值将替代单元格的实际文字，否则，Text参数设置的值不会生效 
	 示例:
	 if(Row>0 and Col>0){ return "demoText",true; }
	***/
	__
}
SetCellText = @.SetCellText = function(Row,Col,Text,Cancel ){
	/***此事件在设置单元格文字时发生，SetCellText事件一般和GetCellText事件一起使用，用于实现虚表功能
	 Row 返回一个整数，标识单元格所在的行号    
	 Col 返回一个整数，标识单元格所在的列号 
	 Text 字符串，保存了单元格的文字 
	 Cancel 一个布尔值，可以在程序中改变这个参数的值。它的缺省值是False，
	 这种情况下，即使使用了虚表功能，控件仍会将单元格文字保存到由控件管理的内存中。
	 如果设置Cancel=True，可以禁止向由控件管理的内存中保存单元格文字，以节约内存，但在禁止了虚表功能后，将会丢失单元格的文字 
	 示例:
	 if(Row>0 and Col>0){ return true; }
	***/
	__
}
HyperLinkClick = @.HyperLinkClick = function(Row,Col,URL,Changed){
	/***此事件在点击超链接单元格时发生
	 Row 返回一个整数，标识单元格所在的行号    
	 Col 返回一个整数，标识单元格所在的列号  
	 URL 字符串表达式，这个参数的值可以重新设置  
	 Changed 如果设置Changed=True，可以使URL参数的值替代原有的URL 
	 示例:
	 if(Row>0 and Col>0){ return "http://www.htmlayout.cn",true; }
	 ***/
	__
}
KeyDown = @.KeyDown = function(KeyCode,Shift){
	/***这些事件是在按下 ( KeyDown ) 或松开 ( KeyUp ) 一个键时发生的
	 KeyCode 是一个键代码，诸如 vbKeyF1 （ F1 键）或 vbKeyHome （ HOME 键）。 
	 Shift 是在该事件发生时响应 SHIFT ,CTRL 和 ALT 键的状态的一个整数。
	 shift 参数是一个位域，它用最少的位响应 SHIFT 键（位 0 ）、CTRL 键（位 1 ）和 ALT 键（位 2 ）。
	 这些位分别对应于值 1、2 和 4。可通过对一些、所有或无位的设置来指明有一些、所有或零个键被按下。
	 例如，如果 CTRL 和 ALT 这两个键都被按下，则 shift 的值为 6   
	 ***/
	__
}
KeyUp = @.KeyUp = function(KeyCode,Shift){
	/***这些事件是在按下 ( KeyDown ) 或松开 ( KeyUp ) 一个键时发生的
	 KeyCode 是一个键代码，诸如 vbKeyF1 （ F1 键）或 vbKeyHome （ HOME 键）。 
	 Shift 是在该事件发生时响应 SHIFT ,CTRL 和 ALT 键的状态的一个整数。
	 Shift 参数是一个位域，它用最少的位响应 SHIFT 键（位 0 ）、CTRL 键（位 1 ）和 ALT 键（位 2 ）。
	 这些位分别对应于值 1、2 和 4。可通过对一些、所有或无位的设置来指明有一些、所有或零个键被按下。
	 例如，如果 CTRL 和 ALT 这两个键都被按下，则 shift 的值为 6   
	 ***/
	__
}
KeyPress = @.KeyPress = function(keyAscii){
	/***这些事件是在按下 ( KeyDown ) 或松开 ( KeyUp ) 一个键时发生的
	 keyAscii 是返回一个标准数字 ANSI 键代码的整数。
	 keyAscii 通过引用传递，对它进行改变可给对象发送一个不同的字符。
	 将 keyAscii 改变为 0 时可取消击键，这样一来对象便接收不到字符。    ***/
	__
}
LeaveCell = @.LeaveCell = function(Row,Col,newRow,newCol,Cancel){
	/***当前活动单元格变更到一个不同的单元格之前立即发生
	 Row 返回一个整数，标识单元格变更之前的行数。 
	 Col 返回一个整数，标识单元格变更之前的列数 
	 newRow 返回一个整数，标识单元格变更之后的行数。可以设置NewRow等于一个整数，使活动单元格移动到此行 
	 newCol 返回一个整数，标识单元格变更之后的列数。可以设置NewCol等于一个整数，使活动单元格移动到此列 
	 Cancel 如果设置Cancel=True，可以防止活动单元格离开原来的位置
	 示例:
	 if(Row>0 and Col>0){ return newRow,newCol,true; }
	***/
	__
}
LeaveRow = @.LeaveRow = function(Row,Cancel){
	/***当前活动单元格变更到一个不同的单元格之前立即发生
	 Row 返回一个整数，标识单元格变更之前的行数。 
	 Cancel 如果设置Cancel=True，可以防止活动单元格离开原来的位置 
	 示例:
	 return true;
	***/
	__
}
MaskError = @.MaskError = function(Row,Col){
	/***此事件在单元格中输入了禁止输入的字符时发生。可以设置控件的ColMask属性来设置输入掩码
	 Row 返回一个整数，标识单元格所在的行  
	 Col 返回一个整数，标识单元格所在的列  
	***/
	__
}
MouseDown = @.MouseDown = function(Button , Shift, x, y){
	/***这些事件是当按下(MouseDown)、释放(MouseUp)或者移动(MouseMove)鼠标按钮时发生
	 Button 返回一个整数，用来标识该事件的产生是按下 ( MouseDown ) 或者释放 ( MouseUp ) 按钮引起的。
	 button 参数是具有相应于左按钮（位 0），右按钮（位 1），以及中间按钮（位 2）的一个位字段。这些位的值分别等于 1，2，和 4。其中仅有一位被设置，指示出引起该事件的那个按钮  
	 Shift 返回一个整数，在 button 参数指定的按钮被按下或者被释放的情况下，该整数相应于 SHIFT,CTRL,和 ALT 键的状态。
	 某键被按下使得一个二进制位被设置。shift 参数是具有相应于 SHIFT 键（位 0），CTRL 键（位 1），以及 ALT 键（位 2）最少二进制位的一个位字段。
	 这些位的值分别等于 1，2，和 4。shift 参数指示这些键的状态。这些位中可能有一些，全部，或者一个也没有被设置，指示这些键中的一些、全部，或者一个也没有被按下。
	 例如，CTRL 和 ALT 键都被按下，则 shift 的值就是 6。  
	 x,y 返回一个指定鼠标指针当前位置的数 
	***/
	__
}
MouseUp = @.MouseUp = function(Button , Shift, x, y){
	/***这些事件是当按下(MouseDown)、释放(MouseUp)或者移动(MouseMove)鼠标按钮时发生
	 Button 返回一个整数，用来标识该事件的产生是按下 ( MouseDown ) 或者释放 ( MouseUp ) 按钮引起的。
	 button 参数是具有相应于左按钮（位 0），右按钮（位 1），以及中间按钮（位 2）的一个位字段。这些位的值分别等于 1，2，和 4。其中仅有一位被设置，指示出引起该事件的那个按钮  
	 Shift 返回一个整数，在 button 参数指定的按钮被按下或者被释放的情况下，该整数相应于 SHIFT,CTRL,和 ALT 键的状态。
	 某键被按下使得一个二进制位被设置。shift 参数是具有相应于 SHIFT 键（位 0），CTRL 键（位 1），以及 ALT 键（位 2）最少二进制位的一个位字段。
	 这些位的值分别等于 1，2，和 4。shift 参数指示这些键的状态。这些位中可能有一些，全部，或者一个也没有被设置，指示这些键中的一些、全部，或者一个也没有被按下。
	 例如，CTRL 和 ALT 键都被按下，则 shift 的值就是 6。  
	 x,y 返回一个指定鼠标指针当前位置的数 
	***/
	__
}
MouseMove = @.MouseMove = function(Button , Shift, x, y){
	/***这些事件是当按下(MouseDown)、释放(MouseUp)或者移动(MouseMove)鼠标按钮时发生
	 Button 返回一个整数，用来标识该事件的产生是按下 ( MouseDown ) 或者释放 ( MouseUp ) 按钮引起的。
	 button 参数是具有相应于左按钮（位 0），右按钮（位 1），以及中间按钮（位 2）的一个位字段。这些位的值分别等于 1，2，和 4。其中仅有一位被设置，指示出引起该事件的那个按钮  
	 Shift 返回一个整数，在 button 参数指定的按钮被按下或者被释放的情况下，该整数相应于 SHIFT,CTRL,和 ALT 键的状态。
	 某键被按下使得一个二进制位被设置。shift 参数是具有相应于 SHIFT 键（位 0），CTRL 键（位 1），以及 ALT 键（位 2）最少二进制位的一个位字段。
	 这些位的值分别等于 1，2，和 4。shift 参数指示这些键的状态。这些位中可能有一些，全部，或者一个也没有被设置，指示这些键中的一些、全部，或者一个也没有被按下。
	 例如，CTRL 和 ALT 键都被按下，则 shift 的值就是 6。  
	 x,y 返回一个指定鼠标指针当前位置的数 
	***/
	__
}

OwnerDrawCell = @.OwnerDrawCell  = function(Row,Col,hDC,Left,Top,Right,Bottom,Handled){
	/***当Grid.DrawMode属性设置为OwnerDraw时，控件在画单元格内容之前，会触发此事件，
	 允许用户在此事件中编程，用自己的代码画出表格内容（如Text、Image、CheckBox图像等）
	 Row 返回一个Long值，它指定了单元格的行号   
	 Col 返回一个Long值，它指定了单元格的列号 
	 hDC 返回Grid控件的设备场景的句柄 
	 Left 返回一个Long值，它指定了单元格的左边相对于控件左边界的位置 
	 Top 返回一个Long值，它指定了单元格的上边相对于控件上边界的位置 
	 Right 返回一个Long值，它指定了单元格的右边相对于控件左边界的位置 
	 Bottom 返回一个Long值，它指定了单元格的下边相对于控件上边界的位置 
	 Handled 这个参数的值可以改变，如果设置为True，可以结束单元格绘图操作，
	 Handled如果不设置或者设置为False，控件在触发了OwnerDrawCell事件后，还会继续按原来的步骤画出单元格内容   
	 示例:
	 return true;
	***/
	__
}

PercentComplete = @.PercentComplete = function(Message,Percent ){
	/***调用ExportToExcel、ExportToCSV、ExportToPDF、ExportToHTML、ExportToXML方法和LoadFromXML方法时，
	 会触发此事件。当数据量很大时，执行这些方法需要较长的时间，可以在此事件中编程设置ProgressBar的值，
	 显示当前导出/导入任务已完成的百分比
	 Message 返回一个String值，它指定了触发PercentComplete事件的方法名   
	 Percent 返回一个Integer值，它指定了当前导出/导入任务已完成的百分比  
	***/
	__
}

PrintButtonClick = @.PrintButtonClick = function(){
	/***在打印预览窗口中点击“打印”按钮后会触发此事件。
	 使用Visual Basic 6.0时，由于预览窗口是模态的，在调试阶段无法触发此事件，但编译成EXE文件后可以 
	***/
	__
}

RowColChange = @.RowColChange = function(Row,Col){
	/***当前活动单元更改到不同单元时发生
	 Row 返回一个整数，标识单元格所在的行  
	 Col 返回一个整数，标识单元格所在的列  
	***/
	__
}
RowHeightChange = @.RowHeightChange = function(FirstRow,LastRow ){
	/***此事件在一行或多行的行高改变时发生
	 FirstRow 一个整数，起始行号   
	 LastRow 一个整数，截止行号   
	***/
	__
}
Scroll  = @.Scroll  = function(){
	/***此事件在滚动条的值改变时发生***/
	__
}
end intellisense**/

/**intellisense(!FlexRange)
Alignment = 设置整个区域内所有单元格的对齐方式，此属性是只写的\ncellLeftBottom=7;\ncellGeneralTop=1;\ncellGeneralCenter=2\ncellGeneralBottom=3\ncellRightBottom=15\ncellLeftGeneral=4;\ncellCenterGeneral=8;\ncellRightCenter=14;\ncellLeftTop=5;\ncellRightTop=13;\ncellGeneralGeneral=0;\ncellCenterCenter=10;\ncellRightGeneral=12;\ncellLeftCenter=6;\ncellCenterTop=9;\ncellCenterBottom=11
BackColor = 设置整个区域内所有单元格的背景色，此属性是只写的
BarcodeType = 返回或设置整个区域内所有单元格的类型,条形码类型为:\n_cellCODE128A=2;\n_cellEAN128=5;\n_cellInterleaved2of5=7;\n_cellCODE39=1;\n_cellCODE128B=3;\n_cellDefaultType=0;\n_cellCODE128C=4;\n_cellEAN13=6
Borders(1/*_cellEdgeRight*/,2/*_cellThick*/) = 设置整个区域内所有单元格的边框线型，此属性是只写的\n参数: 边框位置,样式
FirstCol = 返回所选区域最左边的单元格所处的列数，此属性是只读的
FirstRow = 返回所选区域最上边的单元格所处的行数，此属性是只读的
FontBold = 设置整个区域内所有单元格的字形是粗体或非粗体，此属性是只写的,bool值
FontItalic = 设置整个区域内所有单元格的字形是斜体或非斜体，此属性是只写的
FontName = 设置整个区域内所有单元格的字体名字，此属性是只写的
FontSize = 设置整个区域内所有单元格的字体大小，此属性是只写的
FontStrikethrough = 设置整个区域内所有单元格的字形为删除线或无删除线，此属性是只写的
FontUnderline = 设置整个区域内所有单元格的字形有下划线或无下划线，此属性是只写的
ForeColor = 设置整个区域内所有单元格的前景色（即文字的颜色），此属性是只写的
LastCol = 返回所选区域最右边的单元格所处的列数，此属性是只读的
LastRow = 返回所选区域最下边的单元格所处的行数，此属性是只读的
Locked = 设置整个区域内所有单元格是否锁定（只读），此属性是只写的
Mask = 设置整个区域内所有单元格的输入掩码，此属性是只写的参数为:\n_cellNoMask=0;\n_cellValue=5;\n_cellUpper=3;\n_cellDefaultMask=6;\n_cellNumeric=1;\n_cellLetter=2;\n_cellLower=4
MergeCells = (bool值)合并或取消合并整个区域内的单元格，此属性是只写的
WrapText = 设置整个区域内所有单元格是否自动换行，如果此属性设置为True，当单元格内的文字超过一行时会自动换行，此属性是只写的。
ClearAll() = 该方法用于清除所选区域内所有单元格的内容和格式
ClearFormat() = 该方法用于清除所选区域内所有单元格的格式
ClearText() = 该方法用于清除所选区域内所有单元格的文字
DeleteByCol() = 该方法按整列方式从表格中删除单元格
DeleteByRow() = 该方法按整行方式从表格中删除单元格
Merge() = 该方法用于将所选区域内所有单元格合并成一个单元格
Selected() = 该方法用于选定区域内所有单元格，选定后即可通过FlexCell表格控件的Selection属性对之进行操作
Sort(Col,Order) = 该方法用于对所选区域内的单元格进行排序\nCol 一个整数，用于指定按哪一列排序 \nOrder 一个SortConstants枚举值，用于指定排序顺序 \n_cellDescending=1;\n_cellAscending=0
end intellisense**/

/**intellisense(!FlexSelection)
Alignment = 设置整个区域内所有单元格的对齐方式，此属性是只写的\n_cellLeftBottom=7;\n_cellGeneralTop=1;\n_cellGeneralCenter=2\n_cellGeneralBottom=3\n_cellRightBottom=15\n_cellLeftGeneral=4;\n_cellCenterGeneral=8;\n_cellRightCenter=14;\n_cellLeftTop=5;\n_cellRightTop=13;\n_cellGeneralGeneral=0;\n_cellCenterCenter=10;\n_cellRightGeneral=12;\n_cellLeftCenter=6;\n_cellCenterTop=9;\n_cellCenterBottom=11
BackColor = 设置整个区域内所有单元格的背景色，此属性是只写的
BarcodeType = 返回或设置整个区域内所有单元格的条形码类型,条形码类型为:\n_cellCODE128A=2;\n_cellEAN128=5;\n_cellInterleaved2of5=7;\n_cellCODE39=1;\n_cellCODE128B=3;\n_cellDefaultType=0;\n_cellCODE128C=4;\n_cellEAN13=6
Borders(1/*_cellEdgeRight*/,2/*_cellThick*/) = 设置整个区域内所有单元格的边框线型，此属性是只写的\n参数: 边框位置,样式
FirstCol = 返回所选区域最左边的单元格所处的列数，此属性是只读的
FirstRow = 返回所选区域最上边的单元格所处的行数，此属性是只读的
FontBold = 设置整个区域内所有单元格的字形是粗体或非粗体，此属性是只写的,bool值
FontItalic = 设置整个区域内所有单元格的字形是斜体或非斜体，此属性是只写的
FontName = 设置整个区域内所有单元格的字体名字，此属性是只写的
FontSize = 设置整个区域内所有单元格的字体大小，此属性是只写的
FontStrikethrough = 设置整个区域内所有单元格的字形为删除线或无删除线，此属性是只写的
FontUnderline = 设置整个区域内所有单元格的字形有下划线或无下划线，此属性是只写的
ForeColor = 设置整个区域内所有单元格的前景色（即文字的颜色），此属性是只写的
LastCol = 返回所选区域最右边的单元格所处的列数，此属性是只读的
LastRow = 返回所选区域最下边的单元格所处的行数，此属性是只读的
Locked = 设置整个区域内所有单元格是否锁定（只读），此属性是只写的
Mask = 设置整个区域内所有单元格的输入掩码，此属性是只写的参数为:\n_cellNoMask=0;\n_cellValue=5;\n_cellUpper=3;\n_cellDefaultMask=6;\n_cellNumeric=1;\n_cellLetter=2;\n_cellLower=4
MergeCells = (bool值)合并或取消合并整个区域内的单元格，此属性是只写的
WrapText = 设置整个区域内所有单元格是否自动换行，如果此属性设置为True，当单元格内的文字超过一行时会自动换行，此属性是只写的。
SelectedObject = (只读)返回选择的对象类型,返回的参数为:\n_cellClientCell=0;\n_cellEntireColumn=2;\n_cellEntireRow=1;\n_cellEntireGrid=3
ClearAll() = 该方法用于清除所选区域内所有单元格的内容和格式
ClearFormat() = 该方法用于清除所选区域内所有单元格的格式
ClearText() = 该方法用于清除所选区域内所有单元格的文字
CopyData() = 该方法用于将选定区域内所有单元格内容（包括文字和格式）复制到剪贴板，您可以把剪贴板中的内容粘贴到FlexCell中去，也可以将之粘贴到Excel、用友华表和其它程序中去，但单元格格式将会丢失
CutData() = 该方法用于将选定区域内所有单元格内容（包括文字和格式）复制到剪贴板，并清除原Selection中的数据，您可以把剪贴板中的内容粘贴到FlexCell中去，也可以将之粘贴到Excel、用友华表和其它程序中去，但单元格格式将会丢失
DeleteByCol() = 该方法按整列方式从表格中删除单元格
DeleteByRow() = 该方法按整行方式从表格中删除单元格
InsertCols() = 该方法向表格中插入空列，数量等于当前所选单元格的总列数
InsertRows() = 该方法向表格中插入空行，数量等于当前所选单元格的总行数
Merge() = 该方法用于将所选区域内所有单元格合并成一个单元格
PasteData() = 该方法用于将剪贴板中的数据粘贴到FlexCell表格中去，如果将要粘贴的目标区域超出了表格的边界，或此区域内包含锁定的单元格，都不能执行粘贴操作
Selected() = 选定区域内所有单元格，选定后即可通过FlexCell表格控件的Selection属性对之进行操作
Sort(Col,Order) = 该方法用于对所选区域内的单元格进行排序\nCol 一个整数，用于指定按哪一列排序 \nOrder 一个SortConstants枚举值，用于指定排序顺序 \n_cellDescending=1;\n_cellAscending=0
end intellisense**/

/**intellisense(!Imgs)
Add("filePath","key") = 该方法向Grid控件的Images图片组添加一个图片\n参数:FilePath=字符串，用于指定图片文件的完整路径（文件名）\nkey=字符串，用于指定图片的键，调用Cell对象的SetImage()方法时需要用到此值。需要注意的是，图片组中不能有重复的键。
AddPicture(Picture,Key) = 该方法向Grid控件的Images图片组添加一个图片\nPicture 一个StdPicture对象。 \nKey 字符串表达式，用于指定图片的键，调用Cell对象的SetImage()方法时需要用到此值。需要注意的是，图片组中不能有重复的键 
Count() = 该方法返回Grid控件的Images图片组中的图片总数
Item("key") = 该方法返回对Images图片组中的一个图片的引用,参数key:字符串或数值表达式，用于指定图片的键或索引
Item() = 该方法返回对Images图片组中的一个图片的引用\n!imgItem.
Remove("key") = 该方法从Grid控件的Images图片组中删除一个图片,参数key:字符串或数值，用于指定图片的键或索引
end intellisense**/ 
/**intellisense(!imgItem)
Key = 返回Image对象的键，该属性是只读的
Picture = 返回Image对象的图片，可以调用SavePicture等图形方法保存此图片
SaveAs(FileName) = 该方法用于将Images图片组中的单个图片保存为位图文件(*.bmp)。\nFileName 必需的。字符串表达式，用于指定文件名 
end intellisense**/

/**intellisense(!HPageBks)
Add(8) = 该方法向Grid控件的HPageBreaks（或VPageBreaks）集合中组添加一个分页符\n参数:用于指定分页符的位置（水平分页符的行号或垂直分页符的列号）
Clear() = 该方法清除HPageBreaks（或VPageBreaks）集合中的所有分页符
Count() = 该方法返回Grid控件的HPageBreaks（或VPageBreaks）集合中的分页符总数
Item(1).Location = 该方法返回对HPageBreaks（或VPageBreaks）集合中一个分页符的引用的位置（水平分页符的行号或垂直分页符的列号）,括号内为参数(例子中引用的第1个位置)
Remove(1) = 该方法从Grid控件的HPageBreaks（或VPageBreaks）集合中删除一个分页符,参数为引用的索引(示例中为第1个引用)
end intellisense**/ 
 
/**intellisense(!Cell)
Text = 返回或设置单元格的内容,如果单元格类型是复选框，Checked状态下，Text=“1”，否则Text=“0”
Alignment = 返回或设置单元格的对齐方式\n_cellLeftBottom=7;\n_cellGeneralTop=1;\n_cellGeneralCenter=2\n_cellGeneralBottom=3\n_cellRightBottom=15\n_cellLeftGeneral=4;\n_cellCenterGeneral=8;\n_cellRightCenter=14;\n_cellLeftTop=5;\n_cellRightTop=13;\n_cellGeneralGeneral=0;\n_cellCenterCenter=10;\n_cellRightGeneral=12;\n_cellLeftCenter=6;\n_cellCenterTop=9;\n_cellCenterBottom=11
BackColor = 返回或设置单元格的背景色
BarcodeType = 返回或设置单元格条形码类型,条形码类型为:\n_cellCODE128A=2;\n_cellEAN128=5;\n_cellInterleaved2of5=7;\n_cellCODE39=1;\n_cellCODE128B=3;\n_cellDefaultType=0;\n_cellCODE128C=4;\n_cellEAN13=6
BooleanValue = (只读的)以Boolean类型返回单元格的值
setBorder(3/*_cellEdgeBottom*/ , 2/*_cellThick*/) = 设置单元格的边框线型\n参数1为:cellDiagonalUp=6;\ncellEdgeLeft=0;\ncellEdgeTop=2;\ncellInsideHorizontal=5;\ncellEdgeRight=1;\ncellDiagonalDown=7;\ncellEdgeBottom=3;\ncellInsideVertical=4\ncellOutside=8;\ncellAll=9;\n参数2为:\ncellThick=2;\ncellNone=0;\ncellDot=3;\ncellThin=1
getBorder(3/*_cellEdgeBottom*/) = 获取单元格的边框线型\n参数1为:cellDiagonalUp=6;\ncellEdgeLeft=0;\ncellEdgeTop=2;\ncellInsideHorizontal=5;\ncellEdgeRight=1;\ncellDiagonalDown=7;\ncellEdgeBottom=3;\ncellInsideVertical=4\ncellOutside=8;\ncellAll=9;
CellType = 返回或设置单元格类型,如果此属性设置为cellDefault，则此单元格使用其所在Column的CellType。\n所有CellType=cellComboBox的单元格，在用户输入时都使用Grid.ComboBox(0)，而不是Grid.ComboBox(Cell.Col)，必须在Grid_ComboDropDown事件中向ComboBox中添加下拉项。\ncellDate=3;\ncellDefault=6;\ncellTextBox=0;\ncellHyperLink=5;\ncellComboBox=1;\ncellCheckBox=2;\ncellButton=4;\ncellTime=7;\ncellDateTime=8;\ncellBarCode=9
Col = (只读的)返回单元格所在的列数
Comment = 返回或设置单元格的批注内容
DoubleValue = (只读的)以Double类型返回单元格的值
Font = 返回或设置单元格的字体\n!cellFont.
ForeColor = 返回或设置单元格的前景色（即文字的颜色）
Height = (只读的)返回单元格的高度，如果指定的单元格是合并单元格，则返回合并单元格的总高度
Width = (只读的)返回单元格的宽度，如果指定的单元格是合并单元格，则返回合并单元格的总宽度
ImageKey = 返回单元格图片的键字符串，可以用键代替位置索引来访问Images集合中的成员。如果单元格没有图片，则返回一个空字符串(“”)。该属性是只读的
IntegerValue = 以Integer类型返回单元格的值，此属性是只读的
Left = (只读的)返回单元格的左边框和控件左边框之间的距离，如果单元格不在当前可见范围之内，则返回-1
Top = (只读的)返回单元格的上边框和控件上边框之间的距离，如果单元格不在当前可见范围之内，则返回-1
Locked = 返回或设置单元格是否锁定
LongValue = 以Long类型返回单元格的值，此属性是只读的
Mask = 返回或设置单元格的输入掩码,参数为:\n_cellNoMask=0;\n_cellValue=5;\n_cellUpper=3;\n_cellDefaultMask=6;\n_cellNumeric=1;\n_cellLetter=2;\n_cellLower=4
MergeCell = (只读的)返回单元格是否是合并单元格
Printable = 返回或设置单元格是否可以打印
Row = (只读的)返回单元格所在的行数
SingleValue = 以Single类型返回单元格的值，此属性是只读的
Tag = 返回或设置一个表达式用来存储程序中需要的额外数据
WrapText = (bool值)返回或设置单元格是否自动换行，如果此属性设置为True，当单元格内的文字超过一行时会自动换行
EnsureVisible() = 该方法可滚动FlexCell控件，确保单元格是可见的
Refresh() = 该方法重画一个单元格
SetFocus() = 该方法可滚动FlexCell控件，确保单元格是可见的，并将之设置为活动单元格
SetImage(.(ImageKey) = 该方法用于为单元格设置图片。Images图片组中的一个图片可以应用到多个单元格中，而且可以设置不同的显示效果\n字符串表达式，它用于指定图片的键。设置ImageKey=""，可以清除单元格的图片
end intellisense**/

/**intellisense(!FlexComboBox)
AutoComplete = bool值,返回或设置ComboBox子控件是否支持自动完成，自动完成功能可以使用户在ComboBox中的输入更方便，但这项功能只对英文字母和数字有效，对中文字符无效
Font = 返回ComboBox子控件下拉列表的字体\n!cellFont.
ItemData(index,value) = 设置ComboBox子控件中每个项目具体的编号\nIndex 一个整数，用于指定项的编号 \nValue 一个长整数，与指定项目相关联的数 
ItemData(index) = 返回ComboBox子控件中每个项目具体的编号\nIndex 一个整数，用于指定项的编号
ListCount = (只读的)返回某列ComboBox子控件的项的总数
ListIndex = (只读的)返回某列ComboBox子控件的当前项的索引值
ListItem(index) = (只读的)返回某列ComboBox子控件的项\nIndex 一个整数，用于指定项的索引值 
ListRows = 返回或设置某列ComboBox子控件下拉列表最多可容纳的行数\nValue 一个整数，ComboBox下拉列表可容纳的行数 
ListWidth = 返回或设置某列ComboBox子控件下拉列表部分的宽度
Locked = 返回或设置ComboBox子控件是否禁键盘输入，如果Locked设置为True，只能从下拉框中选择列表项
NewIndex = (只读的)返回最近加入ComboBox子控件的项的索引
AddItem(item) = 将项目添加到ComboBox子控件中\nItem 必需的。字符串，它用来指定添加到该ComboBox子控件的项目 
Clear() = 清空ComboBox子控件中的所有项
DropDown() = 显示ComboBox控件的下拉列表窗口。注意，只有在ComboBox控件可见时，调用此方法才能显示出下拉窗口
FindItem(item,length,matchCase) = 该方法用于在ComboBox子控件的下拉列表中查找与指定字符串相匹配的项。如果找到了匹配的项，返回该项的ListIndex，否则返回-1\nItem 必需的。字符串，它用来指定要查找的字符串 \nLength 可选的。数值表达式，它用来指定匹配字符数，缺省值为0，表示全部匹配 \nMatchCase 可选的。一个布尔值，它用来指定是否区分字符的大小写，缺省值为False 
RemoveItem(ListIndex) = 删除ComboBox子控件中的一项\nListIndex表示要删除的项在ComboBox子控件中的位置
end intellisense**/

/**intellisense(!cellFont)
setName("宋体") = 设置字体名称,例如"宋体"
setSize(20) = 设置字体大小,例如20像素
setBold(true) = 设置字体是否加粗,参数为bool值
setItalic(true) = 设置单元格的字体是否为斜体,参数为bool值
setStrikethrough(true) = 设置单元格的字体是否带删除线,参数为bool值
setUnderline(true) = 设置单元格的字体是否带下划线,参数为bool值
end intellisense**/

/**intellisense(!FlexChart)
AxesColor = 返回或设置图表座标轴的颜色
ChartType = 返回或设置图表类型,参数为:\n_cell3DLine=4;\n_cellColumnClustered=0;\n_cellLine=1;\n_cell3DColumnClustered=3;\n_cellPie=2;\n_cell3DPie=5
DisplayAxes = 返回或设置图表是否显示座标轴bool值
DisplayAxesLabels = 返回或设置是否在图表中显示纵座标轴或横座标轴上的文字\n_cellLabelsXAxis=1;\n_cellLabelsNone=0;\n_cellLabelsYAxis=2;\n_cellLabelsBoth=3
DisplayDataLabels = 返回或设置图表是否显示数值标签bool值\n一个布尔值，它指定了是否在图表上显示数值（柱形图和折线图显示实际数值，饼图只显示百分比）
DisplayGridlines = 返回或设置图表是否显示网格线
DisplayLegend = 返回或设置图表是否显示图例框
FirstCol = 返回图表数据源的起始列号
FirstRow = 返回图表数据源的起始行号
GridLinesColor = 返回或设置图表网格线的颜色
HideDecimalAxisLabel = bool值,返回或设置图表是否隐藏带小数点的座标。\n例如，所有所果图表数据源中的数据都是0或1，会显现纵座标为0.5的情况，但我们知道事实上是不可能存在0.5个人的，这个时候就应该把HideDecimalAxisLabel属性设置为True，隐藏带小数点的座标
HideSmallPercentage = 返回或设置是否隐藏饼图中数值较小的标签（百分比），如果表格中有大量的“0%”或“1%”，挤在一起会互相覆盖\n低于这个数值的百分比都会隐藏起来，缺省值为-1，取值范围：-1至100
LastCol = 返回图表数据源的截止列号
LastRow = 返回图表数据源的截止行号
LegendItemSpacing = 返回或设置图例框中各个项目之间的间距\n它指定了项目之间的间距（图例框文字高度的倍数），取值范围在0~2之间，缺省值为0.75
LineWidth = 返回或设置图表的线宽
PlotBy = 返回或设置图表是按行还是按列生成系列,参数为:\n_cellColumns=0;\n_cellRows=1
ScaleFont = 返回或设置图表是否自动缩放字体。如果ScaleFont属性设置为True，Chart对象所在单元格（或合并单元格）的最佳设置值是：宽度为300像素，高度为180像素，此时Chart对象不会对字体进行任何缩放处理
WallColor = 返回或设置图表背景墙的颜色
XAxisLabelAngle = 返回或设置图表横座标标签的旋转角度,单位是度，取值范围：0~90度
YMin = 返回或设置图表纵座标的起点值
SetDataSource(FirstRow, FirstCol, LastRow, LastCol) = 该方法用于为Chart对象设置数据源。FlexCell图表的数据源是FlexCell表格中的一块单元格
SetSeriesColor(Series, Color) = 该方法用于为Chart对象的某个系列设置颜色,\nSeries = 一个整数，用于指定需要设置颜色的系列，对于第一个系列，Series=0\n Color = 一个颜色表达示，用于指定该系列的颜色 
SetSeriesName(Series, Name) = 该方法用于为Chart对象的某个系列设置名称\nSeries 必需的。一个整数，用于指定需要设置名称的系列，对于第一个系列，Series=0 \nName 必需的。一个字符串，用于指定该系列的名称 
end intellisense**/

/**intellisense(!FlexColumn)
Alignment = 返回或设置整列单元格的对齐方式,\ncellLeftBottom=7;\ncellGeneralTop=1;\ncellGeneralCenter=2\ncellGeneralBottom=3\ncellRightBottom=15\ncellLeftGeneral=4;\ncellCenterGeneral=8;\ncellRightCenter=14;\ncellLeftTop=5;\ncellRightTop=13;\ncellGeneralGeneral=0;\ncellCenterCenter=10;\ncellRightGeneral=12;\ncellLeftCenter=6;\ncellCenterTop=9;\ncellCenterBottom=11
BarcodeType = 返回或设置一整列单元格的条形码类型条形码类型为:\n_cellCODE128A=2;\n_cellEAN128=5;\n_cellInterleaved2of5=7;\n_cellCODE39=1;\n_cellCODE128B=3;\n_cellDefaultType=0;\n_cellCODE128C=4;\n_cellEAN13=6
CellType = 返回或设置整列单元格的子控件类型\n_cellDate=3;\n_cellDefault=6;\n_cellTextBox=0;\n_cellHyperLink=5;\n_cellComboBox=1;\n_cellCheckBox=2;\n_cellButton=4;\n_cellTime=7;\n_cellDateTime=8;\n_cellBarCode=9
DecimalLength = 返回或设置整列单元格的可输入的最长的小数位置,参数是一个整数，指定了小数点后的位数
FormatString = 返回或设置整列单元格的文字显示格式,它指定了单元格文字的显示格式具体设置可以参考MSDN中Format()函数的相关帮助
Locked = 返回或设置整列单元格是否锁定（只读）。
Mask = 返回或设置整列单元格的输入掩码\n_cellNoMask=0;\n_cellValue=5;\n_cellUpper=3;\n_cellDefaultMask=6;\n_cellNumeric=1;\n_cellLetter=2;\n_cellLower=4
MaxLength = 返回或设置整列单元格最长可以输入多少位字符
Position = 设置一个列的位置，允许移动列到指定的位置。如果表格中存在合并单元格，则属性的设置不会生效
SearchMethod = 返回或设置ComboBox子控件寻找与指定字符串相匹配的项时所采用的搜索方法\n_cellBinarySearch=1;\n_cellLinearSearch=0
UserSortIndicator = 返回或设置固定行上某一列的排序标识（一个三角形图标）\n_cellSortIndicatorNone=0;\n_cellSortIndicatorAscending=1;\n_cellSortIndicatorDescending=2;\n_cellSortIndicatorDisabled=3
Width = 返回或设置某列的列宽，单位是像素,如果把第0列的列宽设置为0，则可以隐藏固定列
AutoFit() = 自动调整表格中指定列的列宽，使此列单元格不必折行显示即可容纳所有单元格文字
Sort(1/*_cellDescending*/) = 用于将表格内容按某一列作为关键字进行排序。需要说明的是，如果表格中包含有合并单元格和图表，就不能进行排序，也不会有任何提示\n_cellDescending=1;\n_cellAscending=0
end intellisense**/


/**intellisense(!PageSET)



end intellisense**/

/**intellisense(!FlexReportTitles)

end intellisense**/

/**intellisense()
_cellTextOnly=@2/*_cellTextOnly*/
_cellColumns=@0/*_cellColumns*/
_cellScrollBarBoth=@3/*_cellScrollBarBoth*/
_cellPaperLedger=@4/*_cellPaperLedger*/
_cellCenter=@1/*_cellCenter*/
_cellScrollBarHorizontal=@1/*_cellScrollBarHorizontal*/
_cellVisualStyles=@2/*_cellVisualStyles*/
_cellLine=@1/*_cellLine*/
_cellCODE39=@1/*_cellCODE39*/
_cellPaperBinUpper=@1/*_cellPaperBinUpper*/
_cellNone=@0/*_cellNone*/
_cellPaperBinEnvelope=@5/*_cellPaperBinEnvelope*/
_cellPaperLetterSmall=@2/*_cellPaperLetterSmall*/
_cellLinearSearch=@0/*_cellLinearSearch*/
_cellEdgeLeft=@0/*_cellEdgeLeft*/
_cellLabelsXAxis=@1/*_cellLabelsXAxis*/
_cellPaperEnvC6=@0x1F/*_cellPaperEnvC6*/
_cellPie=@2/*_cellPie*/
_cellPaperBinTractor=@8/*_cellPaperBinTractor*/
_cellBinarySearch=@1/*_cellBinarySearch*/
_cellPaperA5=@0xB/*_cellPaperA5*/
_cellPaperFanfoldUS=@0x27/*_cellPaperFanfoldUS*/
_cellTime=@7/*_cellTime*/
_cellSortIndicatorDescending=@2/*_cellSortIndicatorDescending*/
_cellPaperUser=@0x100/*_cellPaperUser*/
_cellPaperLetter=@1/*_cellPaperLetter*/
_cellPaperNote=@0x12/*_cellPaperNote*/
_cellDiagonalUp=@6/*_cellDiagonalUp*/
_cellPaper10x14=@0x10/*_cellPaper10x14*/
_cellThursday=@4/*_cellThursday*/
_cellMargin=@0/*_cellMargin*/
_cellHMS=@0/*_cellHMS*/
_cellPaperEnv12=@0x16/*_cellPaperEnv12*/
_cellPaperEnvC4=@0x1E/*_cellPaperEnvC4*/
_cellLabelsBoth=@3/*_cellLabelsBoth*/
_cellDefaultMask=@6/*_cellDefaultMask*/
_cellThin=@1/*_cellThin*/
_cellPaperEnv11=@0x15/*_cellPaperEnv11*/
_cellInsideVertical=@4/*_cellInsideVertical*/
_Flat=@0/*_Flat*/
_cellEdgeBottom=@3/*_cellEdgeBottom*/
_cellPaperEnvB4=@0x21/*_cellPaperEnvB4*/
_cellOutside=@8/*_cellOutside*/
_cellFriday=@5/*_cellFriday*/
_cellPaperBinManual=@4/*_cellPaperBinManual*/
_cellHMAMPM=@3/*_cellHMAMPM*/
_cellLower=@4/*_cellLower*/
_cellMonday=@1/*_cellMonday*/
_cellPaperEnvB5=@0x22/*_cellPaperEnvB5*/
_cellPaperBinAuto=@7/*_cellPaperBinAuto*/
_cellSaturday=@6/*_cellSaturday*/
_cellPaperEnvPersonal=@0x26/*_cellPaperEnvPersonal*/
_cellLandscape=@2/*_cellLandscape*/
_cellLetter=@2/*_cellLetter*/
_cellPaperB5=@0xD/*_cellPaperB5*/
_cellHMSAMPM=@1/*_cellHMSAMPM*/
_cellPaperA4=@9/*_cellPaperA4*/
_cellDateTime=@8/*_cellDateTime*/
_cellDescending=@1/*_cellDescending*/
_cellGrid=@1/*_cellGrid*/
_Solid=@0/*_Solid*/
_cellPaperBinLargeCapacity=@0xB/*_cellPaperBinLargeCapacity*/
_cellTuesday=@2/*_cellTuesday*/
_cellPaperStatement=@6/*_cellPaperStatement*/
_cellSortIndicatorAscending=@1/*_cellSortIndicatorAscending*/
_cellScrollBarVertical=@2/*_cellScrollBarVertical*/
_cellInsideHorizontal=@5/*_cellInsideHorizontal*/
_cellBarCode=@9/*_cellBarCode*/
_cell3DPie=@5/*_cell3DPie*/
_cellRows=@1/*_cellRows*/
_cellPaperExecutive=@7/*_cellPaperExecutive*/
_cellNotAllowed=@3/*_cellNotAllowed*/
_cellPaperEnvC3=@0x1D/*_cellPaperEnvC3*/
_cellTextAndFormat=@0/*_cellTextAndFormat*/
_cellAll=@9/*_cellAll*/
_cellPaperEnvMonarch=@0x25/*_cellPaperEnvMonarch*/
_cellLabelsNone=@0/*_cellLabelsNone*/
_cellGeneralGeneral=@0/*_cellGeneralGeneral*/
_cellAscending=@0/*_cellAscending*/
_cellNextCol=@0/*_cellNextCol*/
_cellRightGeneral=@0xC/*_cellRightGeneral*/
_cellGeneralBottom=@3/*_cellGeneralBottom*/
_cellUpper=@3/*_cellUpper*/
_cellLeftTop=@5/*_cellLeftTop*/
_cellPaperFanfoldStdGerman=@0x28/*_cellPaperFanfoldStdGerman*/
_cellLeftCenter=@6/*_cellLeftCenter*/
_cellPaperEnvB6=@0x23/*_cellPaperEnvB6*/
_cellLeftBottom=@7/*_cellLeftBottom*/
_cellPaperA3=@8/*_cellPaperA3*/
_cellWednesday=@3/*_cellWednesday*/
_cellPaperBinCassette=@0xE/*_cellPaperBinCassette*/
_cellCheckBox=@2/*_cellCheckBox*/
_cellRightTop=@0xD/*_cellRightTop*/
_cellLight3D=@1/*_cellLight3D*/
_cellCenterBottom=@0xB/*_cellCenterBottom*/
_cellCenterCenter=@0xA/*_cellCenterCenter*/
_cellSelectionByRow=@1/*_cellSelectionByRow*/
_cellRightBottom=@0xF/*_cellRightBottom*/
_cellColumnClustered=@0/*_cellColumnClustered*/
_cellYMD=@0/*_cellYMD*/
_cellMDY=@1/*_cellMDY*/
_cellDefault=@6/*_cellDefault*/
_cellDefaultType=@0/*_cellDefaultType*/
_cellTextBox=@0/*_cellTextBox*/
_cellPaperEnv10=@0x14/*_cellPaperEnv10*/
_cellComboBox=@1/*_cellComboBox*/
_cellPaperA4Small=@0xA/*_cellPaperA4Small*/
_cellButton=@4/*_cellButton*/
_cellPaperTabloid=@3/*_cellPaperTabloid*/
_cellSunday=@0/*_cellSunday*/
_cellPaperEnv14=@0x17/*_cellPaperEnv14*/
_cellCenterTop=@9/*_cellCenterTop*/
_cellCalendar=@3/*_cellCalendar*/
_cellDiagonalDown=@7/*_cellDiagonalDown*/
_cellSelectionFree=@0/*_cellSelectionFree*/
_cellHyperLink=@5/*_cellHyperLink*/
_cellClientCell=@0/*_cellClientCell*/
_cellPaperBinEnvManual=@6/*_cellPaperBinEnvManual*/
_cellEAN128=@5/*_cellEAN128*/
_cellFlat=@0/*_cellFlat*/
_cellDMY=@2/*_cellDMY*/
_cellPaperEnv9=@0x13/*_cellPaperEnv9*/
_cellDate=@3/*_cellDate*/
_cellHM=@2/*_cellHM*/
_cellCODE128A=@2/*_cellCODE128A*/
_cellPaperB4=@0xC/*_cellPaperB4*/
_cellLeft=@0/*_cellLeft*/
_cellCODE128B=@3/*_cellCODE128B*/
_cellPaperEnvC65=@0x20/*_cellPaperEnvC65*/
_cell3DLine=@4/*_cell3DLine*/
_cellPortrait=@1/*_cellPortrait*/
_cellSortIndicatorDisabled=@3/*_cellSortIndicatorDisabled*/
_cellPaperLegal=@5/*_cellPaperLegal*/
_cellPaperEnvDL=@0x1B/*_cellPaperEnvDL*/
_cellInterleaved2of5=@7/*_cellInterleaved2of5*/
_cellPaperEnvItaly=@0x24/*_cellPaperEnvItaly*/
_cellLeftGeneral=@4/*_cellLeftGeneral*/
_cellValue=@5/*_cellValue*/
_cellScrollBarNone=@0/*_cellScrollBarNone*/
_cellPaperBinSmallFmt=@9/*_cellPaperBinSmallFmt*/
_cellPaperFanfoldLglGerman=@0x29/*_cellPaperFanfoldLglGerman*/
_cellPaperBinMiddle=@3/*_cellPaperBinMiddle*/
_cellNumeric=@1/*_cellNumeric*/
_cellPaperDSheet=@0x19/*_cellPaperDSheet*/
_cellTextAndFlexCellFormat=@1/*_cellTextAndFlexCellFormat*/
_cellPaper11x17=@0x11/*_cellPaper11x17*/
_cellPaperCSheet=@0x18/*_cellPaperCSheet*/
_Fixed3D=@1/*_Fixed3D*/
_cellNoMask=@0/*_cellNoMask*/
_cellNormal=@0/*_cellNormal*/
_cellPaperESheet=@0x1A/*_cellPaperESheet*/
_cellOwnerDraw=@1/*_cellOwnerDraw*/
_cellCenterGeneral=@8/*_cellCenterGeneral*/
_cellFlatIndicator=@0/*_cellFlatIndicator*/
_cellCODE128C=@4/*_cellCODE128C*/
_cellRightCenter=@0xE/*_cellRightCenter*/
_cell3DIndicator=@1/*_cell3DIndicator*/
_Dot=@1/*_Dot*/
_cellEdgeRight=@1/*_cellEdgeRight*/
_cellSortIndicatorNone=@0/*_cellSortIndicatorNone*/
_cellSelectionByColumn=@2/*_cellSelectionByColumn*/
_cellPaperBinLower=@2/*_cellPaperBinLower*/
_cellDot=@3/*_cellDot*/
_cell3DColumnClustered=@3/*_cell3DColumnClustered*/
_cellSelectionNone=@3/*_cellSelectionNone*/
_cellPaperEnvC5=@0x1C/*_cellPaperEnvC5*/
_cellPaperFolio=@0xE/*_cellPaperFolio*/
_cellEntireGrid=@3/*_cellEntireGrid*/
_cellRight=@2/*_cellRight*/
_cellThick=@2/*_cellThick*/
_cellEdgeTop=@2/*_cellEdgeTop*/
_cellEAN13=@6/*_cellEAN13*/
_cellGeneralTop=@1/*_cellGeneralTop*/
_cellPaperQuarto=@0xF/*_cellPaperQuarto*/
_cellPaperBinLargeFmt=@0xA/*_cellPaperBinLargeFmt*/
_cellGeneralCenter=@2/*_cellGeneralCenter*/
_cellNextRow=@1/*_cellNextRow*/
_cellLabelsYAxis=@2/*_cellLabelsYAxis*/
_cellEntireColumn=@2/*_cellEntireColumn*/
end intellisense**/
